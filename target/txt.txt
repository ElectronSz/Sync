import express, { Request, Response } from 'express';
import { async } from 'sync-directory';
import { watch, promises as fs } from 'fs';
import path from 'path'; // Import path for path manipulation

const app = express();
const port = 3000;

// Multiple source directories
const srcDirs = [
    "/home/aslav3/Documents/Apps/web/sync/data" // Add more as needed
];

const targetDir = "/home/aslav3/Documents/Apps/web/sync/target";

// Function to sync each source directory (including subdirectories)
async function syncDirectory(srcDir: string) {

    const delay = (time = 2000) => new Promise(r => setTimeout(r, time));

    try {
        console.log(`Syncing directory ${srcDir}...`);
        await async(srcDir, targetDir, {
            async afterEachSync() {
                await delay(2000); // Delay 2s after each file/folder sync
            },
        });
        console.log(`Sync complete for ${srcDir}`);

        // Recursively watch subdirectories:
        const files = await fs.readdir(srcDir, { withFileTypes: true });
        for (const file of files) {
            if (file.isDirectory()) {
                const subdir = path.join(srcDir, file.name);
                const subdirWatcher = watch(subdir, { recursive: true }, (eventType, filename) => {
                    if (eventType === 'change' || eventType === 'rename') {
                        console.log(`File ${filename} changed or added in ${subdir}. Syncing...`);
                        syncDirectory(subdir);
                    }
                });

                subdirWatcher.on('error', (error) => {
                    console.error(`File watcher error for ${subdir}:`, error);
                });
            }
        }
    } catch (error) {
        console.error(`Sync error for ${srcDir}:`, error);
    }
}

// Initial sync of all source directories
srcDirs.forEach(syncDirectory);

// Watch for file changes and re-sync (including subdirectories)
srcDirs.forEach((srcDir) => {
    const watcher = watch(srcDir, { recursive: true }, (eventType, filename) => {
        if (eventType === 'change' || eventType === 'rename') {
            console.log(`File ${filename} changed or added in ${srcDir}. Syncing...`);
            syncDirectory(srcDir);
        }
    });

    watcher.on('error', (error) => {
        console.error(`File watcher error for ${srcDir}:`, error);
    });
});

// Basic API route (optional)
app.get('/', (req: Request, res: Response) => {
    res.send('API is running!');
});

// Start the Express server
app.listen(port, () => {
    console.log(`Server listening on port ${port}`);
});
